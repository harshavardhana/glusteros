#!/bin/sh

echo "  -= Gluster Storage Platform Stage-1 (initamfs) =-  "

export PATH=/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/klibc/bin

# Honourable directory creation and mounting
echo "Initialization ... "

[ -d /dev ] || mkdir -p --mode=0755 /dev
[ -d /root ] || mkdir -p --mode=0700 /root
[ -d /sys ] || mkdir -p /sys
[ -d /proc ] || mkdir -p /proc
[ -d /tmp ] || mkdir -p /tmp
[ -d /source ] || mkdir -p /source
[ -d /squashfs ] || mkdir -p /squashfs
[ -d /realroot ] || mkdir -p /realroot
mkdir -p /var/lock
mkdir -p /var/log
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys 
mount -t proc -o nodev,noexec,nosuid proc /proc 


#Disable kernel messages from popping onto the screen
echo "0" > /proc/sys/kernel/printk

#Create special devices
mount -t tmpfs -o mode=0755 udev /dev
[ -e /dev/console ] || mknod /dev/console c 5 1
[ -e /dev/null ] || mknod /dev/null c 1 3
[ -e /dev/initctl ] || mknod /dev/initctl p

#Defaults
export init="/sbin/init"
export imagedev="/dev/loop0"
export rootmnt="/realroot"
export mountpoint="/source"
export tmpmnt="/tmpfs"
export squashmnt="/squashfs"


#Load some necessary drivers
echo "Loading essential drivers... "
modprobe ata_generic all_generic_ide=1
modprobe fan
modprobe thermal
modprobe usb-storage

#Hotplug goes away.
echo "" > /proc/sys/kernel/hotplug


# Start the udev daemon to process events
/sbin/udevd --daemon 2>&1 >/dev/null

# Iterate sysfs and fire off everything; if we include a rule for it then
# it'll get handled; otherwise it'll get handled later when we do this again
# in the main boot sequence.
/sbin/udevadm trigger

ln -snf /proc/self/fd /dev/fd
ln -snf /proc/self/fd/0 /dev/stdin
ln -snf /proc/self/fd/1 /dev/stdout
ln -snf /proc/self/fd/2 /dev/stderr
mkdir -p /dev/pts
mkdir -p /dev/shm


modprobe loop

if [ ! -e /dev/loop0 ]; then
    # temporary workaround for kernel bug
    for i in 0 1 2 3 4 5 6 7; do
	mknod "/dev/loop$i" b 7 "$i" || true
    done
fi

/sbin/udevadm settle 

####### Check for the device to find squashfs #########
# A bug in udev or Linux kernel USB storage driver needs time to settle 
# down so need a sleep 10
sleep 10

for sysblock in $(echo /sys/block/* | tr ' ' '\n' | grep -v loop | grep -v ram); do
    devname="/dev/$(/sbin/udevadm info --query=name --path=${sysblock} 2>/dev/null)"
    fstype=$(/lib/udev/vol_id -t "${devname}" 2>/dev/null)
  # Check for squashfs on CDROM
    case ${fstype} in
	iso9660|udf)
	    if /lib/udev/cdrom_id ${devname} > /dev/null; then
		mount -t ${fstype} -o ro,noatime "${dev}" $mountpoint;
		if [ -e "${mountpoint}/realroot.gss.x86_64.squashfs" ]; then
		    if [ -e "${imagedev}" ]; then
			losetup ${imagedev} ${mountpoint}/realroot.gss.x86_64.squashfs;
			loopmounted="yes";
			break
		    fi
		else
		    umount $mountpoint;
		fi
	    fi
	    ;;
    esac
    
  # Check for squashfs on USB storage and SATA/SAS storage
    if /lib/udev/path_id "${sysblock}" | grep -E -q "ID_PATH=(usb|pci-[^-]*-[scsi|usb])" ; then
	for sysdev in "${sysblock}"/*; do
	    if [ -e "${sysdev}/dev" ]; then
		dev="/dev/$(/sbin/udevadm info --query=name --path=${sysdev} 2>/dev/null)"
		fstype=$(/lib/udev/vol_id -t ${dev} 2>/dev/null)
		case ${fstype} in
		    vfat|ext2|ext3|ntfs)
			mount -t ${fstype} -o ro,noatime "${dev}" $mountpoint;
			if [ -e "${mountpoint}/realroot.gss.x86_64.squashfs" ]; then
			    if [ -e "${imagedev}" ]; then
				losetup ${imagedev} ${mountpoint}/realroot.gss.x86_64.squashfs;
				loopmounted="yes"
				break
			    fi
			else
			    umount $mountpoint;
			fi
			;;
		esac
	    fi
	done
    fi
done


# Now the final part 

if [ -n "${loopmounted}" ]; then 
    echo "Found realroot Mounting root filesystem ... "
    mount -t tmpfs -o rw,noatime tmpfs "${rootmnt}"
    mount -t squashfs "${imagedev}" "${squashmnt}"
    cd "${squashmnt}"; cp -af * "${rootmnt}"; cd /;
    umount "${squashmnt}"
    losetup -d "${imagedev}"
    umount "${mountpoint}"
    realrootmounted="yes"
fi

# Stop udevd, we'll miss a few events while we run init, but we catch up

echo "Configuring new root filesystem ... "
if [ -n "${realrootmounted}" ]; then 

    killall udevd
    
# udevd might have been in the middle of something when we killed it,
# but it doesn't matter because we'll do everything again in userspace
    rm -rf /dev/.udev/queue
    
# Move the real filesystem's /dev to beneath our tmpfs, then move it all
# to the real filesystem
    mkdir -m 0700 -p /dev/.static/dev
    mount -o bind ${rootmnt}/dev /dev/.static/dev
    mount -o move /dev ${rootmnt}/dev
# Move virtual filesystems over to the real filesystem
    mount -o move /sys ${rootmnt}/sys
    mount -o move /proc ${rootmnt}/proc
fi

#Check if $init exists and is executable
while [ ! -x ${rootmnt}${init} ]; do
        echo "Target filesystem doesn't have ${init}"
	echo "Failed to run init, dropping to a shell"
	exec sh
done


# Final step
exec run-init ${rootmnt} ${init} 1 <${rootmnt}/dev/console >${rootmnt}/dev/console

# You should not be here! 

